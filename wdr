#!/bin/sh
function wdr() {
# https://openweathermap.org/api/
c=0; d=0;

while getopts 'cdl:' o; do
  case ${o} in
    c) c=1;;
    d) d=1;;
    l) location=${OPTARG};;
    *) echo "Usage: $0 [-c (current only)] [-d (descriptions only)] [-l location]" 1>&2; return 1;;
    esac
done

if which curl &>/dev/null; then
    alias fetch='curl -sf';
elif which wget &>/dev/null; then
    alias fetch='wget -qO -';
fi
[ -z $location ] && location='Sofia,Bulgaria';
location=$(echo "${location}" | sed "s/ /%20/g");
api_key=85a4e3c55b73909f42c6a23ec35b7147;

api_call='weather';
weather=$(fetch "api.openweathermap.org/data/2.5/${api_call}?q=${location}&appid=${api_key}&units=metric") || (echo 'Sum Ting Wong!'; return 22);

if [ -z "${weather}" ]; then 
    echo "ERROR: Cannot fetch weather data"; return 69; 
elif [ "$(echo $weather | jq -r '.cod' 2>/dev/null)" != 200 ]; then 
    echo "ERROR: Cannot fetch weather data for the given location"; return 75;
fi;

figlet Weather for ${location};

if [ $c -gt $d ]; then;
    echo $weather | jq -r .; return 0;
elif [ $c -eq $d ] && [  $c -eq 1 ]; then;
    echo $weather | jq -r '.weather[].description' | column ; return 0;
fi;

lat=$(echo $weather | jq -r '.coord.lat');
lon=$(echo $weather | jq -r '.coord.lon');

api_call='onecall';
weather=$(fetch "api.openweathermap.org/data/2.5/${api_call}?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric") || return 22;

if [ $d -eq 1 ]; then
    d=(${(@f)"$(echo $weather | jq -r '.hourly[].weather[].description')"});
    f=(${(@f)$(echo $weather | jq -r '.hourly[].dt' | awk '{print strftime("%H:%M",$1)}')});
    a=(${(@f)$(seq 24)}); s=(${(@f)$(seq 48)}); s[1,24]=(); z=(${a:^s}); unset a s;
    for s in $z; do; a[++i]=${f[s]}" "${g[s]}" "${d[s]}; done; unset d;
    printf "%-28s%-28s\n" "Today" "Tomorrow" ${(@)a};
    return 0;
fi;

# tmp=$(mktemp -d /tmp/wdr.XXXXXX);
mkdir -p /tmp/wdr; cd /tmp/wdr;
# 48 HOUR FORECAST
echo $weather | jq -r '.hourly[].dt'              > dt48h;
echo $weather | jq -r '.hourly[].temp'            > temp48h;
echo $weather | jq -r '.hourly[].feels_like'      > feels_like48h;
echo $weather | jq -r '.hourly[].pressure'        > pressure48h;
echo $weather | jq -r '.hourly[].humidity'        > humidity48h;
echo $weather | jq -r '.hourly[].dew_point'       > dew_point48h;
echo $weather | jq -r '.hourly[].clouds'          > clouds48h;
echo $weather | jq -r '.hourly[].wind_speed'      > wind_speed48h;
echo $weather | jq -r '.hourly[].wind_deg'        > wind_deg48h;
echo $weather | jq '.hourly[].rain | walk (if type == "null" then 0 else . end)' | sed -r '/\{|\}/d; s/ +"1h": //' > rain48h;
echo $weather | jq '.hourly[].snow | walk (if type == "null" then 0 else . end)' | sed -r '/\{|\}/d; s/ +"1h": //' > snow48h;

# 7 DAY FORECAST
echo $weather | jq -r '.daily[].temp.min'         > min7d;
echo $weather | jq -r '.daily[].temp.max'         > max7d;

echo $weather | jq -r '.daily[].temp.day'         > day7d;
echo $weather | jq -r '.daily[].temp.night'       > night7d;
echo $weather | jq -r '.daily[].temp.eve'         > eve7d;
echo $weather | jq -r '.daily[].temp.morn'        > morn7d;

echo $weather | jq -r '.daily[].feels_like.day'   > flday7d;
echo $weather | jq -r '.daily[].feels_like.night' > flnight7d;
echo $weather | jq -r '.daily[].feels_like.eve'   > fleve7d;
echo $weather | jq -r '.daily[].feels_like.morn'  > flmorn7d;

echo $weather | jq -r '.daily[].pressure'         > pressure7d;
echo $weather | jq -r '.daily[].humidity'         > humidity7d;
echo $weather | jq -r '.daily[].clouds'           > clouds7d;
echo $weather | jq -r '.daily[].dew_point'        > dew_point7d;
echo $weather | jq -r '.daily[].wind_deg'         > wind_deg7d;
echo $weather | jq -r '.daily[].wind_speed'       > wind_speed7d;
echo $weather | jq -r '.daily[].rain | walk (if type == "null" then 0 else . end)' > rain7d;
echo $weather | jq -r '.daily[].snow | walk (if type == "null" then 0 else . end)' > snow7d;



octave-cli --persist ~/.config/zsh/other/wdr.m;
# cd ~; rm -r ${tmp};
cd ~; rm -r /tmp/wdr;
}
